<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libraries on If you torture the data long enough, it will confess ©</title>
    <link>/tags/libraries/</link>
    <description>Recent content in libraries on If you torture the data long enough, it will confess ©</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Jun 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/libraries/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>All algorithms implemented in Python - for education</title>
      <link>/post/2022-06-26-all-algorithms-implemented-in-python-for-education/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-06-26-all-algorithms-implemented-in-python-for-education/</guid>
      <description>&lt;p&gt;Implementations are for learning purposes only. As they may be less efficient than the implementations in the Python standard library, use them at your discretion.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Python&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SberProcessMining (SberPM) – Process Mining Python framework</title>
      <link>/post/2022-06-26-sberprocessmining-sberpm-process-mining-python-framework/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-06-26-sberprocessmining-sberpm-process-mining-python-framework/</guid>
      <description>&lt;p&gt;SberPM is an open-source Python library for conducting a comprehensive analysis of business processes with the use of process mining and machine learning techniques. By implementing this tool, objective and deep insights into the process on all levels can be revealed. These insights are then used to detect problems such as bottlenecks and deviations and identify potential opportunities for process improvement and optimization.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SberProcessMining/Sber_Process_Mining&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sashakorekov.medium.com/fast-and-efficient-process-mining-with-sberpm-python-library-part-i-7a8712a31d23&#34;&gt;Example&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5 Python Libraries for Time-Series Analysis</title>
      <link>/post/2022-05-28-5-python-libraries-for-time-series-analysis/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-28-5-python-libraries-for-time-series-analysis/</guid>
      <description>&lt;p&gt;A Time-Series is a sequence of data points collected at different timestamps. 
These are essentially successive measurements collected from the same data source at the same time interval. Further, we can use these chronologically gathered readings to monitor trends and changes over time. The time-series models can be univariate or multivariate. 
The univariate time series models are implemented when the dependent variable is a single time series, like room temperature measurement from a single sensor. 
On the other hand, a multivariate time series model can be used when there are multiple dependent variables, i.e., the output depends on more than one series. An example for the multivariate time-series model could be modelling the GDP, inflation, and unemployment together as these variables are linked to each other.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.analyticsvidhya.com/blog/2022/05/5-python-libraries-for-time-series-analysis/&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiprocessing in Python</title>
      <link>/post/2022-05-28-multiprocessing-in-python/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-05-28-multiprocessing-in-python/</guid>
      <description>&lt;p&gt;This tutorial is divided into four parts; they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Benefits of multiprocessing&lt;/li&gt;
&lt;li&gt;Basic multiprocessing&lt;/li&gt;
&lt;li&gt;Multiprocessing for real use&lt;/li&gt;
&lt;li&gt;Using joblib&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://machinelearningmastery.com/multiprocessing-in-python/&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>15 Open Source libraries for data quality improvement</title>
      <link>/post/2022-04-09-15-open-source-libraries-for-data-quality-improvement/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-09-15-open-source-libraries-for-data-quality-improvement/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://telegra.ph/15-Open-Source-bibliotek-dlya-povysheniya-kachestva-dannyh-04-05-2&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FEDOT framework</title>
      <link>/post/2022-04-09-fedot-framework/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-04-09-fedot-framework/</guid>
      <description>&lt;p&gt;The folder contains jupyter notebooks with examples of FEDOT framework&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ITMO-NSS-team/fedot-examples&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graph-based Fraud Detection Papers and Resources</title>
      <link>/post/2022-03-21-graph-based-fraud-detection-papers-and-resources/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-03-21-graph-based-fraud-detection-papers-and-resources/</guid>
      <description>&lt;p&gt;A curated list of fraud detection papers using graph information or graph neural networks&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/safe-graph/graph-fraud-detection-papers&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PyTorch VAE</title>
      <link>/post/2022-03-21-pytorch-vae/</link>
      <pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-03-21-pytorch-vae/</guid>
      <description>&lt;p&gt;A collection of Variational AutoEncoders (VAEs) implemented in pytorch with focus on reproducibility.&lt;/p&gt;
&lt;p&gt;The aim of this project is to provide a quick and simple working example for many of the cool VAE models out there. All the models are trained on the CelebA dataset for consistency and comparison.&lt;/p&gt;
&lt;p&gt;The architecture of all the models are kept as similar as possible with the same layers, except for cases where the original paper necessitates a radically different architecture (Ex. VQ VAE uses Residual layers and no Batch-Norm, unlike other models). Here are the results of each model.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AntixK/PyTorch-VAE&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 Useful Examples of Python’s itertools</title>
      <link>/post/2022-02-19-7-useful-examples-of-python-s-itertools/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/post/2022-02-19-7-useful-examples-of-python-s-itertools/</guid>
      <description>&lt;p&gt;The Python itertools library is provides extremely useful utility functions for dealing with iterables.&lt;/p&gt;
&lt;p&gt;By becoming fluent in the itertools functions, you can combine them in new ways and use them as building blocks for tackling complex problems in very few lines of code. In this article, you will see 7 practical examples of the applications of itertools functions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/7-useful-examples-of-pythons-itertools-e561dc9f15ca&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss> 
